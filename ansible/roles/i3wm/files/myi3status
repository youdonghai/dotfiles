#! /usr/bin/env python3

from datetime import datetime, timedelta
from threading import Lock
import subprocess
import json
import sys
import signal
import logging
import time


logging.basicConfig(filename='/tmp/myi3status.log', level=logging.INFO)


class GetStatusError(Exception):
    pass


def time_string():
    status = {'name': 'time', 'full_text': datetime.now().strftime('%m-%d(%a) %H:%M')}
    return status


def battery_level():
    status = {}
    try:
        p = subprocess.Popen(['acpi', '-b'],
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE)
        out, err = p.communicate()
        if err:
            raise GetStatusError(str(err, 'utf-8'))
    except FileNotFoundError:
        raise GetStatusError()
    out = str(out, 'utf-8').split()
    out = list(map(lambda x: x.strip(' ,'), out))
    level = int(out[3][:-1])
    if out[2] == 'Charging':
        status['full_text'] = ''
        if level < 100:
            status['full_text'] += ' '
        status['full_text'] += '{:02d}%'.format(level)
        return status
    prefix = ''
    if level < 25:
        prefix = ' '
        status['color'] = '#dc322f'
    elif level < 50:
        prefix = ' '
        status['color'] = '#b58900'
    elif level < 75:
        prefix = ' '
    elif level < 100:
        prefix = ' '
    else:
        prefix = ''
    status['full_text'] = prefix + '{:02d}%'.format(level)
    return status


def wireless_status():
    status = {}
    level = 0
    try:
        with open('/proc/net/wireless') as f:
            for i, l in enumerate(f):
                if i == 2:
                    level = int(l.split()[2].strip().strip('.'))
                    if level > 100:
                        level = 99
    except FileNotFoundError:
        raise GetStatusError
    status['full_text'] = ' {:02d}%'.format(level)
    if level < 30:
        status['color'] = '#dc322f'
    elif level < 60:
        status['color'] = '#b58900'
    return status


processor_number = 0


def get_processor_number():
    processor_number = 0
    with open('/proc/cpuinfo') as f:
        for l in f:
            if l.startswith('processor'):
                processor_number += 1
    return processor_number


def loadavg_status():
    status = {}
    load = 0.00
    with open('/proc/loadavg') as f:
        for l in f:
            load = float(l.split()[0])
    level = int(load / processor_number * 100)
    status['full_text'] = ' {:02d}%'.format(level)
    if level > 70:
        status['color'] = '#dc322f'
    elif level > 40:
        status['color'] = '#b58900'
    return status


def volume_status():
    status = {'name': 'volume'}
    level = 0
    number = 0
    on = True
    p = subprocess.Popen(['amixer', 'get', 'Master'],
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    out, err = p.communicate()
    if err:
        raise GetStatusError(str(err, 'utf-8'))
    out = str(out, 'utf-8').split('\n')
    channels = []
    for line in out:
        if 'Playback channels:' in line:
            channels = line.split(':')[-1].split('-')
            channels = list(map(lambda x: x.strip(), channels))
            continue
        if not channels or channels[0] not in line:
            continue
        channels = channels[1:]
        infos = line.split()
        if infos[-1] == '[off]':
            on = False
        new_level = int(infos[-2].strip('[]%'))
        if number > 0:
            level = (level * number + new_level) / (number + 1)
        else:
            level = new_level
        number += 1
    if on:
        full_text = ''
    else:
        full_text = ''
    level = int(level)
    status['full_text'] = full_text + ' {:02d}%'.format(level)
    return status


pomodoro_info = {}
pomodoro_work_seconds = timedelta(minutes=25).total_seconds()
pomodoro_rest_seconds = timedelta(minutes=5).total_seconds()


def pomodoro_status():
    now_status = pomodoro_info.get('status')
    if now_status is None:
        # skip
        raise GetStatusError()
    elif now_status == 'working':
        return pomodoro_working()
    elif now_status == 'resting':
        return pomodoro_resting()
    return {}


def pomodoro_working():
    start_time = pomodoro_info.get('start_time')
    if start_time is None:
        start_time = datetime.now()
        pomodoro_info['start_time'] = start_time
    now_time = datetime.now()
    working_seconds = (now_time - start_time).total_seconds()
    if working_seconds >= pomodoro_work_seconds:
        # enter reset status
        switch_to_resting()
        return pomodoro_resting()
    progress = int(100.0 * working_seconds / pomodoro_work_seconds)
    if progress < 50:
        prefix = ''
    elif progress < 80:
        prefix = ''
    else:
        prefix = ''
    full_text = prefix + ' {:02d}%'.format(progress)
    return {'name': 'pomodoro', 'full_text': full_text}


def switch_to_resting():
    pomodoro_info['status'] = 'resting'
    pomodoro_info['start_time'] = datetime.now()
    return # can not unlock
    try:
        subprocess.call(['i3lock'],
                        stdout=subprocess.DEVNULL,
                        stderr=subprocess.DEVNULL,
                        )
    except:
        pass


def pomodoro_resting():
    start_time = pomodoro_info.get('start_time')
    now_time = datetime.now()
    resting_seconds = (now_time - start_time).total_seconds()
    if resting_seconds >= pomodoro_rest_seconds:
        pomodoro_event_abrot()
        return {}
    progress = int(100.0 * resting_seconds / pomodoro_rest_seconds)
    full_text = ' {:02d}%'.format(progress)
    return {'name': 'pomodoro', 'full_text': full_text, 'color': '#dc322f'}


status_list = [
    {'interval': 1, 'function': pomodoro_status},
    {'interval': 2, 'function': volume_status},
    {'interval': 2, 'function': loadavg_status},
    {'interval': 2, 'function': wireless_status},
    {'interval': 2, 'function': battery_level},
    {'interval': 1, 'function': time_string},
]


def get_new_string(status):
    status['tick'] = 1
    status['cached_status'] = None
    status_out = status['function']()
    status['cached_status'] = status_out
    return status_out


handler_lock = Lock()
force_update = True


def update_i3bar():
    global force_update
    status_out = []
    for status in status_list:
        logging.debug('status: %s', str(status))
        try:
            if force_update:
                status_out.append(get_new_string(status))
                continue
            if status['tick'] < status['interval']:
                cached_status = status.get('cached_status')
                if cached_status:
                    status_out.append(cached_status)
                status['tick'] += 1
                continue
            status_out.append(get_new_string(status))
        except GetStatusError:
            continue
    force_update = False
    out_put = json.dumps(status_out, separators=(',', ':')) + ','
    logging.debug('output: %s', out_put)
    sys.stdout.write(out_put)
    sys.stdout.flush()


def timer_handler(signum, frame):
    if handler_lock.acquire(blocking=False):
        try:
            update_i3bar()
        except:
            logging.exception('update_i3bar')
        finally:
            handler_lock.release()



def volume_event_handler():
    subprocess.call(['amixer', 'set', 'Master', 'toggle'],
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL,
                    )


def pomodoro_event_abrot():
    try:
        del pomodoro_info['status']
        del pomodoro_info['start_time']
    except KeyError:
        pass


def time_event_handler():
    if pomodoro_info.get('status') is None:
        pomodoro_info['status'] = 'working'


event_handler_map = {
    'volume': volume_event_handler,
    'time': time_event_handler,
    'pomodoro': pomodoro_event_abrot,
}

if __name__ == '__main__':
    processor_number = get_processor_number()
    header = {'version': 1, 'click_events': True}
    sys.stdout.write(json.dumps(header, separators=(',', ':')))
    sys.stdout.write('[')
    sys.stdout.flush()
    signal.signal(signal.SIGALRM, timer_handler)
    time_stamp = time.time()
    next_timer = (int(int(time_stamp) / 5) + 1) * 5 - time_stamp
    signal.setitimer(signal.ITIMER_REAL, next_timer, 5)
    for line in sys.stdin:
        try:
            line = line.strip(' ,\n')
            logging.debug('input: %s', line)
            event = json.loads(line)
            name = event.get('name')
            if not name:
                continue
            handler = event_handler_map.get(name)
            if handler and handler_lock.acquire(blocking=False):
                try:
                    handler()
                except:
                    pass
                else:
                    force_update = True
                    update_i3bar()
                finally:
                    handler_lock.release()
        except:
            continue
